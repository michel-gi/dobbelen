name: Build Cross-Platform Executables

on:
  push:
    branches: [ "main", "master" ]
    # Voorkom dat de workflow draait voor wijzigingen die alleen documentatie betreffen
    paths-ignore:
      - '**.md'
      - 'doc_training/**'
  pull_request:
    branches: [ "main", "master" ]
    paths-ignore:
      - '**.md'
      - 'doc_training/**'
  workflow_dispatch: # Maakt het mogelijk om de build handmatig te starten

jobs:
  test:
    name: Run database tests
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Run tekstdb_tester.py
      # This step will fail if the script exits with a non-zero code.
      run: python tekstdb_tester.py

  build:
    needs: test # Zorg ervoor dat de tests eerst slagen
    # Gebruik een matrix om de job op meerdere besturingssystemen te draaien
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest] #, macos-latest]
        script:
          - name: dobbelsteen_simulatie
            type: gui
          - name: vergelijk_verdelingen
            type: gui
          - name: plot_eindpunt_kansen
            type: gui
          - name: tekstdb_bewerk
            type: console
          - name: tekstdb_tester
            type: console

    runs-on: ${{ matrix.os }}

    steps:
    - name: Check out repository code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12' # Gebruik dezelfde Python-versie als lokaal.

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Deze stap stelt de naam van de executable in op basis van het OS
    - name: Set executable name
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "exe_name=${{ matrix.script.name }}.exe" >> $GITHUB_ENV
        else
          echo "exe_name=${{ matrix.script.name }}" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build with PyInstaller
      run: |
        # Start met de basis-argumenten
        PYINSTALLER_ARGS="--onefile"

        # Bepaal of het een console of windowed app is en voeg specifieke opties toe
        if [[ "${{ matrix.script.type }}" == "gui" ]]; then
          # Voor GUI-apps (Tkinter, Matplotlib): verberg het consolevenster op Windows
          # en help PyInstaller met het vinden van de Tkinter-backend voor Matplotlib.
          PYINSTALLER_ARGS="$PYINSTALLER_ARGS --windowed --hidden-import PIL._tkinter_finder"
        else
          # Voor console-apps: zorg dat er een consolevenster is.
          PYINSTALLER_ARGS="$PYINSTALLER_ARGS --console"
        fi

        # Voeg het icoon en versie-info alleen toe aan de hoofd-applicatie
        if [[ "${{ matrix.script.name }}" == "dobbelsteen_simulatie" ]]; then
          if [[ "${{ runner.os }}" == "Windows" && -f "assets/dice.ico" && -f "version.py" ]]; then
            PYINSTALLER_ARGS="$PYINSTALLER_ARGS --icon=assets/dice.ico --version-file version.py"
          # elif [[ "${{ runner.os }}" == "macOS" && -f "assets/dice.icns" ]]; then
          #   PYINSTALLER_ARGS="$PYINSTALLER_ARGS --icon=assets/dice.icns"
          fi # macOS build is disabled for now
        fi

        # Voer PyInstaller uit met de samengestelde argumenten
        pyinstaller $PYINSTALLER_ARGS ${{ matrix.script.name }}.py
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.script.name }}-${{ runner.os }}
        path: dist/${{ env.exe_name }}

  release:
    # De 'release' job draait alleen als de 'build' job succesvol is voor alle OS'en
    needs: [build, test]
    runs-on: ubuntu-latest
    # Draai deze job alleen bij een push naar de main branch, niet bij pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      # 'contents: write' is vereist om releases te kunnen aanmaken en assets te uploaden.
      contents: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare files for release
      run: |
        mkdir release-assets
        cd artifacts
        for dir in *; do
          if [[ ! -d "$dir" ]]; then continue; fi

          # Pak het ene bestand uit de artifact-map
          file_path=$(find "$dir" -type f -print -quit)
          if [[ -z "$file_path" ]]; then continue; fi

          # Construeer de nieuwe, unieke bestandsnaam op basis van de mapnaam
          # bv. "dobbelsteen_simulatie-windows-latest" -> "dobbelsteen_simulatie-windows.exe"
          if [[ "$dir" == *-windows-latest ]]; then
            os="windows"
            script_name=${dir%-windows-latest}
            ext=".exe"
          elif [[ "$dir" == *-ubuntu-latest ]]; then
            os="linux"
            script_name=${dir%-ubuntu-latest}
            ext=""
          # elif [[ "$dir" == *-macos-latest ]]; then
          #   os="macos"
          #   script_name=${dir%-macos-latest}
          #   ext=""
          fi # macOS build is disabled for now
          mv "$file_path" "../release-assets/${script_name}-${os}${ext}"
        done
      shell: bash

    - name: Generate release tag
      id: tag
      # Gebruik de 'pushed_at' tijd van de repository voor een deterministische tag.
      # De '@' voor de timestamp geeft aan dat het een Unix epoch tijd is.
      run: echo "release_tag=release-$(date -u -d @${{ github.event.repository.pushed_at }} +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Create Release and Upload Artifacts
      uses: softprops/action-gh-release@v2
      with:
        # Maak een tag aan op basis van de datum en tijd, bv. 'release-20240815123000'
        tag_name: ${{ steps.tag.outputs.release_tag }}
        # Gebruik de laatste commit message als de body van de release notes
        body: |
          Automatische release van de laatste wijzigingen.
          Commit: ${{ github.sha }}
        make_latest: true # Markeer deze release als de 'latest'
        fail_on_unmatched_files: true # Laat de job falen als er geen bestanden zijn om te uploaden
        files: |
          release-assets/*